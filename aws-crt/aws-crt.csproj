<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <PlatformTarget Condition="$(PlatformTarget) == '' AND $(OS) == 'Windows_NT' AND ($(CMakeGenerator) == 'Visual Studio 14 2015' OR $(CMakeGenerator) == 'Visual Studio 15 2017')">x86</PlatformTarget>
    <PlatformTarget Condition="$(PlatformTarget) == ''">x64</PlatformTarget>
    <RootNamespace>Aws.CRT</RootNamespace>

    <!-- project switches -->
    <BannerTaskSkip Condition="$(BannerTaskSkip) == ''">true</BannerTaskSkip>

    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <PackageOutputPath>$(MSBuildThisFileDirectory)../packages</PackageOutputPath>
    <IncludeSymbols>true</IncludeSymbols>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
    <RestoreIgnoreFailedSource>true</RestoreIgnoreFailedSource>

    <PackageId>AWSCRT</PackageId>
    <Title>AWS CRT - AWS Common Runtime</Title>
    <Version>1.0.0-dev</Version>
    <Authors>aws-sdk-common-runtime</Authors>
    <Company>Amazon</Company>
    <PackageLicenseExpression>Apache-2.0</PackageLicenseExpression>
    <PackageTags>AWS,native,Amazon</PackageTags>
    <RepositoryUrl>https://github.com/awslabs/aws-crt-dotnet.git</RepositoryUrl>
    <Copyright>Amazon Web Services</Copyright>
    <Description>AWS Common Runtime bindings for .NET</Description>
  </PropertyGroup>

  <PropertyGroup>
    <CMakeCoreCount Condition="$(CMakeCoreCount) == ''">$([System.Environment]::ProcessorCount)</CMakeCoreCount>
    <CMakeBinaryDir Condition="$(CMakeBinaryDir) == ''">$(CbSlnDir)build</CMakeBinaryDir>
    <CMakeSourceDir Condition="$(CMakeSourceDir) == ''">$(CbSlnDir)native</CMakeSourceDir>
    <CMakeDepsDir Condition="$(CMakeDepsDir) == ''">$(CbSlnDir)deps</CMakeDepsDir>
    <CMakeBuildType Condition="$(CMakeBuildType) == '' AND $(Configuration) == 'Debug'">Debug</CMakeBuildType>
    <CMakeBuildType Condition="$(CMakeBuildType) == ''">RelWithDebInfo</CMakeBuildType>
    <CMakeGenerator Condition="$(CMakeGenerator) == '' AND $(OS) == 'Windows_NT' AND $(PlatformTarget) == 'x64' AND $(VisualStudioVersion) == '14.0'">Visual Studio 14 2015 Win64</CMakeGenerator>
    <CMakeGenerator Condition="$(CMakeGenerator) == '' AND $(OS) == 'Windows_NT' AND $(PlatformTarget) == 'x64' AND $(VisualStudioVersion) == '15.0'">Visual Studio 15 2017 Win64</CMakeGenerator>
    <CMakeGenerator Condition="$(CMakeGenerator) == '' AND $(OS) == 'Windows_NT' AND $(PlatformTarget) == 'x64' AND $(VisualStudioVersion) == '16.0'">Visual Studio 16 2019</CMakeGenerator>
    <CMakeGenerator Condition="$(CMakeGenerator) == '' AND $(OS) == 'Windows_NT' AND $(PlatformTarget) == 'x86' AND $(VisualStudioVersion) == '14.0'">Visual Studio 14 2015</CMakeGenerator>
    <CMakeGenerator Condition="$(CMakeGenerator) == '' AND $(OS) == 'Windows_NT' AND $(PlatformTarget) == 'x86' AND $(VisualStudioVersion) == '15.0'">Visual Studio 15 2017</CMakeGenerator>
    <CMakeGenerator Condition="$(CMakeGenerator) == '' AND $(OS) == 'Unix'">Unix Makefiles</CMakeGenerator>
    <CMakeArchSwitch Condition="$(CMakeArchSwitch) == '' AND $(CMakeGenerator) == 'Visual Studio 16 2019'">-A x64</CMakeArchSwitch>
    <CMakeLibCryptoSwitch Condition="$(CMakeLibCryptoSwitch) != ''">-DLibCrypto_INCLUDE_DIR=$(LibCryptoPath)/include -DLibCrypto_STATIC_LIBRARY=$(LibCryptoPath)/lib/libcrypto.a</CMakeLibCryptoSwitch>
    <CMakePrefixSwitch Condition="$(CMakePrefixSwitch) != ''">-DCB_PLUGIN_PREFIX_OVERRIDE=$(CbPluginPrefix)</CMakePrefixSwitch>
    <CMakeOutputSwitch Condition="$(CMakeOutputSwitch) != ''">-DCB_PLUGIN_NAME_OVERRIDE=$(CbPluginName)</CMakeOutputSwitch>
    <CMakeSuffixSwitch Condition="$(CMakeSuffixSwitch) != ''">-DCB_PLUGIN_SUFFIX_OVERRIDE=$(CbPluginSuffix)</CMakeSuffixSwitch>
    <CMakePluginSwitches Condition="$(CMakePluginSwitches) != ''">$(CMakePrefixSwitch) $(CMakeOutputSwitch) $(CMakeSuffixSwitch)</CMakePluginSwitches>
    <CMakeConfigSwitches Condition="$(CMakeConfigSwitches) == ''">-DCMAKE_BUILD_TYPE=$(CMakeBuildType) -DCMAKE_EXPORT_COMPILE_COMMANDS=ON $(CMakeArchSwitch) $(CMakeLibCryptoSwitch)</CMakeConfigSwitches>
    <CMakeCommandConfig Condition="$(CMakeCommandConfig) == ''">cmake -G&quot;$(CMakeGenerator)&quot; $(CMakeConfigSwitches) $(CMakeSourceDir)</CMakeCommandConfig>
    <CMakeCommandBuild Condition="$(CMakeCommandBuild) == ''">cmake --build $(CMakeBinaryDir) --config $(CMakeBuildType) -j $(CMakeCoreCount)</CMakeCommandBuild>
    <CMakeCommandClean Condition="$(CMakeCommandClean) == ''">cmake --build $(CMakeBinaryDir) --target clean</CMakeCommandClean>
  </PropertyGroup>
  <ItemGroup>
    <CMakeSources Include="$(CMakeSourceDir)/src/*" />
    <CMakeSources Include="$(CMakeDepsDir)/**/*.h" />
    <CMakeSources Include="$(CMakeDepsDir)/**/*.hpp" />
    <CMakeSources Include="$(CMakeDepsDir)/**/*.hxx" />
    <CMakeSources Include="$(CMakeDepsDir)/**/*.c" />
    <CMakeSources Include="$(CMakeDepsDir)/**/*.cpp" />
    <CMakeSources Include="$(CMakeDepsDir)/**/*.cxx" />
    <CMakeBinaries Include="$(CMakeBinaryDir)/lib/$(CbPluginBinary)" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="CMake" Version="3.5.2" />
    <PackageReference Include="System.Runtime.Loader" Version="4.3.0" />
    <PackageReference Include="Microsoft.CSharp" Version="4.5.0" />
  </ItemGroup>

  <!-- c6burns style: (noun) a distinctive appearance, typically featuring 80s consoles and/or text adventure games -->
  <Import Project="$(CbSlnDir)MSBuild/BannerTask.targets" Condition="'$(BuildingInsideVisualStudio)' != 'true'" />
  <Target Name="ConsoleBanner" Condition="'$(BuildingInsideVisualStudio)' != 'true'" BeforeTargets="BeforeBuild">
    <BannerTask Condition="'$(BannerTaskSkip)' != 'true'" LineDelay="50" EndDelay="500" TextFile="$(CbSlnDir)MSBuild/Banner.txt"/>
  </Target>

  <Target Name="MakeLocalPackageSource" BeforeTargets="Restore;CollectPackageReferences">
    <MakeDir Directories="$(SolutionDir)/packages" />
  </Target>

  <Target Name="CMakeClean" Condition="$(CbPluginNativeBuild) == 'true'" BeforeTargets="Clean">
    <Message Text="CMake: Cleanining ==============================================================" Importance="high" />
    <Message Text="$(CMakeCommandClean)" Importance="high" />
    <Message Text="================================================================================" Importance="high" />
    <Exec Condition="Exists('$(CMakeBinaryDir)/CMakeCache.txt')"
      Command="$(CMakeCommandClean)"
      WorkingDirectory="$(CMakeBinaryDir)"
      ConsoleToMSBuild="true">
      <Output TaskParameter="ConsoleOutput" PropertyName="OutputOfExec" />
    </Exec>
  </Target>

  <Target Name="CMakeDeepClean">
    <Message Text="CMake: Deep Cleanining =========================================================" Importance="high" />
    <RemoveDir Directories="$(CMakeDepsDir);$(CMakeBinaryDir)" />
    <MakeDir Directories="$(CMakeDepsDir);$(CMakeBinaryDir)" />
    <CallTarget Targets="Clean"/>
  </Target>

  <Target Name="CMakePrepare" BeforeTargets="Build">
    <MakeDir Directories="$(CMakeDepsDir);$(CMakeBinaryDir)" />
  </Target>

  <Target Name="CMakeConfigure" Condition="$(CbPluginNativeBuild) == 'true'"
    Inputs="@(CMakeSources)"
    Outputs="@(CMakeBinaries)"
    BeforeTargets="Build;VSTest"
    AfterTargets="CMakePrepare">
    <Message Text="CMake: Build environment =======================================================" Importance="high" />
    <Message Text="  Configuration: $(CMakeBuildType)" Importance="high" />
    <Message Text="       Platform: $(OS) $(PlatformTarget)" Importance="high" />
    <Message Text="      Generator: $(CMakeGenerator)" Importance="high" />
    <Message Text="       Parallel: $(CMakeGenerator)" Importance="high" />
    <Message Text="       CbSlnDir: $(CbSlnDir)" Importance="high" />
    <Message Text="       CbSdkDir: $(CbSdkDir)" Importance="high" />
    <Message Text=" PluginFullPath: $(PluginFullPath)" Importance="high" />
    <Message Text="DefineConstants: $(DefineConstants)" Importance="high" />
    <Message Text="CMake: Configuring =============================================================" Importance="high" />
    <Message Text="$(CMakeCommandConfig)" Importance="high" />
    <Message Text="================================================================================" Importance="high" />
    <Exec
      Command="$(CMakeCommandConfig)"
      WorkingDirectory="$(CMakeBinaryDir)"
      ConsoleToMSBuild="true"
      CustomWarningRegularExpression="([Ww]arning|Built target)">
      <Output TaskParameter="ConsoleOutput" PropertyName="OutputOfExec" />
    </Exec>
    <!-- TODO <OnError ExecuteTargets="CMakeConfigureFailed" /> -->
  </Target>

  <Target Name="CMakeBuild" Condition="$(CbPluginNativeBuild) == 'true'"
    Inputs="@(CMakeSources)"
    Outputs="@(CMakeBinaries)"
    BeforeTargets="Build;VSTest"
    AfterTargets="CMakeConfigure">
    <Message Text="CMake: Building with $(CMakeCoreCount) parallel cores =========================================" Importance="high" />
    <Message Text="$(CMakeCommandBuild)" Importance="high" />
    <Message Text="================================================================================" Importance="high" />
    <Exec
      Command="$(CMakeCommandBuild)"
      WorkingDirectory="$(CMakeBinaryDir)"
      ConsoleToMSBuild="true"
      CustomWarningRegularExpression="([Ww]arning|Built target)">
      <Output TaskParameter="ConsoleOutput" PropertyName="OutputOfExec" />
    </Exec>
    <!-- TODO <OnError ExecuteTargets="CMakeBuildFailed" /> -->
  </Target>

  <Target Name="CMakeEmbed" Condition="$(CbPluginNativeBuild) == 'true'"
    BeforeTargets="Build"
    AfterTargets="CMakeBuild">
    <ItemGroup>
      <EmbeddedResource Include="$(CMakeBinaryDir)/lib/*aws-crt-dotnet*" Exclude="**/*.ilk" />
    </ItemGroup>
    <Message Text="Embedded library: %(EmbeddedResource.Identity)" Importance="High" />
  </Target>

</Project>
