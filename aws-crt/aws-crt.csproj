<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <PlatformTarget Condition="$(PlatformTarget) == '' AND $(OS) == 'Windows_NT' AND ($(CMakeGenerator) == 'Visual Studio 14 2015' OR $(CMakeGenerator) == 'Visual Studio 15 2017')">x86</PlatformTarget>
    <PlatformTarget Condition="$(PlatformTarget) == ''">x64</PlatformTarget>
    <RootNamespace>Aws.CRT</RootNamespace>

    <LibCryptoPath></LibCryptoPath>
    <BuildNativeLibrary>true</BuildNativeLibrary>

    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <PackageOutputPath>$(ProjectDir)../packages</PackageOutputPath>
    <IncludeSymbols>true</IncludeSymbols>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
    <RestoreIgnoreFailedSource>true</RestoreIgnoreFailedSource>

    <PackageId>AWSCRT</PackageId>
    <Title>AWS CRT - AWS Common Runtime</Title>
    <Version>1.0.0-dev</Version>
    <Authors>aws-sdk-common-runtime</Authors>
    <Company>Amazon</Company>
    <PackageLicenseExpression>Apache-2.0</PackageLicenseExpression>
    <PackageTags>AWS,native,Amazon</PackageTags>
    <RepositoryUrl>https://github.com/awslabs/aws-crt-dotnet.git</RepositoryUrl>
    <Copyright>Amazon Web Services</Copyright>
    <Description>AWS Common Runtime bindings for .NET</Description>

    <CMakeGenerator Condition="$(CMakeGenerator) == '' AND $(OS) == 'Windows_NT' AND $(PlatformTarget) == 'x64' AND $(VisualStudioVersion) == '14.0'">Visual Studio 14 2015 Win64</CMakeGenerator>
    <CMakeGenerator Condition="$(CMakeGenerator) == '' AND $(OS) == 'Windows_NT' AND $(PlatformTarget) == 'x64' AND $(VisualStudioVersion) == '15.0'">Visual Studio 15 2017 Win64</CMakeGenerator>
    <CMakeGenerator Condition="$(CMakeGenerator) == '' AND $(OS) == 'Windows_NT' AND $(PlatformTarget) == 'x64' AND $(VisualStudioVersion) == '16.0'">Visual Studio 16 2019</CMakeGenerator>
    <CMakeGenerator Condition="$(CMakeGenerator) == '' AND $(OS) == 'Windows_NT' AND $(PlatformTarget) == 'x86' AND $(VisualStudioVersion) == '14.0'">Visual Studio 14 2015</CMakeGenerator>
    <CMakeGenerator Condition="$(CMakeGenerator) == '' AND $(OS) == 'Windows_NT' AND $(PlatformTarget) == 'x86' AND $(VisualStudioVersion) == '15.0'">Visual Studio 15 2017</CMakeGenerator>
    <CMakeGenerator Condition="$(CMakeGenerator) == '' AND $(OS) == 'Unix'">Unix Makefiles</CMakeGenerator>
    <CMakeArch Condition="$(CMakeGenerator) == 'Visual Studio 16 2019'">-A x64</CMakeArch>
    <CMakeBinaries Condition="$(OS) == 'Windows_NT'">c:/build-$(MSBuildProjectName)</CMakeBinaries>
    <CMakeBinaries Condition="$(OS) != 'Windows_NT'">$(ProjectDir)../build</CMakeBinaries>
    <CMakeConfig Condition="$(Configuration) == 'Debug'">Debug</CMakeConfig>
    <CMakeConfig Condition="$(CMakeConfig) == ''">RelWithDebInfo</CMakeConfig>
    <CMakeLibCrypto Condition="$(LibCryptoPath) != ''">-DLibCrypto_INCLUDE_DIR=$(LibCryptoPath)/include -DLibCrypto_STATIC_LIBRARY=$(LibCryptoPath)/lib/libcrypto.a</CMakeLibCrypto>
    <CMakeParallelCount Condition="$(CMakeParallelCount) == ''">$([System.Environment]::ProcessorCount)</CMakeParallelCount>
    <CMakeParallelSwitch Condition="$(OS) == 'Windows_NT'">-parallel $(CMakeParallelCount)</CMakeParallelSwitch>
    <CMakeParallelSwitch Condition="$(OS) != 'Windows_NT'">-j$(CMakeParallelCount)</CMakeParallelSwitch>
    <CMakeCmdConfig>cmake -G&quot;$(CMakeGenerator)&quot; -DCMAKE_BUILD_TYPE=$(CMakeConfig) -DCMAKE_EXPORT_COMPILE_COMMANDS=ON $(CMakeArch) $(CMakeLibCrypto) $(ProjectDir)../native</CMakeCmdConfig>
    <CMakeCmdBuild>cmake --build . --config $(CMakeConfig) -- $(CMakeParallel)</CMakeCmdBuild>
  </PropertyGroup>
  <ItemGroup>
    <PackageReference Include="CMake" Version="3.5.2" />
    <PackageReference Include="System.Runtime.Loader" Version="4.3.0" />
    <PackageReference Include="Microsoft.CSharp" Version="4.5.0" />
  </ItemGroup>

  <Target Name="MakeLocalPackageSource" BeforeTargets="Restore;CollectPackageReferences">
    <MakeDir Directories="$(SolutionDir)/packages" />
  </Target>

  <Target Name="BuildNativeLibrary"
    Condition="$(BuildNativeLibrary) == 'true'"
    BeforeTargets="Build">
    <MakeDir Directories="$(CMakeBinaries)" />
    <Message Text="CMake: Configuring ==============================================================" Importance="high"/>
    <Message Text="       Platform: $(OS) $(PlatformTarget)" Importance="high"/>
    <Message Text="      Generator: $(CMakeGenerator)" Importance="high"/>
    <Message Condition="$(OS) != 'Windows_NT'" Text="  Configuration: $(CMakeConfig)" Importance="high"/>
    <Exec Command="$(CMakeCmdConfig)" WorkingDirectory="$(CMakeBinaries)" ConsoleToMSBuild="true" StandardOutputImportance="low" StandardErrorImportance="high">
      <Output TaskParameter="ConsoleOutput" PropertyName="OutputOfExec" />
    </Exec>
    <Message Text="CMake: Configure complete" Importance="high"/>
    <Message Text="" Importance="high"/>

    <Message Text="CMake: Building with $(CMakeParallelCount) parallel cores" Importance="high"/>
    <Exec Command="$(CMakeCmdBuild)" WorkingDirectory="$(CMakeBinaries)" ConsoleToMSBuild="true" StandardOutputImportance="low" StandardErrorImportance="high">
      <Output TaskParameter="ConsoleOutput" PropertyName="OutputOfExec" />
    </Exec>
    <Message Text="CMake: Build complete" Importance="high"/>
  </Target>

  <Target Name="EmbedNativeLibraries"
    BeforeTargets="Build"
    AfterTargets="BuildNativeLibrary">
    <ItemGroup>
      <EmbeddedResource Include="$(CMakeBinaries)/lib/*aws-crt-dotnet*" Exclude="**/*.ilk" />
    </ItemGroup>
    <Message Text="Embedded library: %(EmbeddedResource.Identity)" Importance="High"/>
  </Target>

</Project>
